.callback__title,.link-g{text-transform:uppercase}#form,.callback,.callback__form,.gallery,main{width:100%}.gallery{background:url(../images/2.jpg) center center no-repeat;padding-top:40px;border-bottom:3px solid #de3838}.blocks-gallery{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:distribute;justify-content:space-around}.blocks-gallery__item{-ms-flex-preferred-size:306px;flex-basis:306px;text-align:center}.blocks-gallery__item img{max-width:100%;border-bottom:1px solid #de3838}.link-g{display:block;font-size:18px;line-height:22px;background-color:transparent;font-weight:400;margin:20px 0;border-bottom:3px solid transparent;transition:.5s}.link-g:hover{border-bottom:3px solid #de3838;transition:.5s}.callback{background:#fff}.callback__title{font-size:24px;line-height:29px;margin-top:42px;font-family:RobotoLight,sans-serif;text-align:center}.input{width:49%;display:inline-block}.input input,.input-wrapper textarea{background:#efefef;border-radius:10px;width:100%;color:#7F7F7F;padding:15px;letter-spacing:4px}.input input{margin:auto;border:none;min-height:39px;font-weight:700}.input label{font-size:17px;line-height:19px;font-weight:400;font-style:italic}.input-wrapper{margin-top:15px}.input-wrapper textarea{border:none;font-weight:700;min-height:176px}.send-btn,.text{font-weight:400}.send-btn{color:#FFF;line-height:14px;font-size:17px;background-color:#DE3838;border-radius:10px;letter-spacing:4px;width:286px;border:none;text-align:center;padding:20px 0;margin:30px auto;display:block;cursor:pointer}.text{font-size:18px;margin-top:26px;min-height:128px;line-height:23px;background-color:transparent;text-align:justify}@media screen and (max-width:992px){.gallery{background:#efefef}}@media screen and (max-width:768px){.input{width:100%}}@media screen and (max-width:520px){.callback__title{font-size:20px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
